{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js??ref--13-0!/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/employee.js","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/employee.js","mtime":1543149914900},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1538403001796},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\n\nvar _mutations;\n\nimport { SET_EMPLOYEE, SET_EMPLOYEES, SET_INITIAL_STATE } from '../mutation-types';\nimport { getField, updateField } from 'vuex-map-fields';\n\nvar initState = function initState() {\n  return {\n    employees: [],\n    employee: {},\n    params: {\n      q: '',\n      status: '',\n      branchId: '',\n      departmentId: '',\n      positionId: '',\n      contractType: '',\n      dateOfFirstContract: '',\n      dateExpiration: '',\n      dateOfBirth: '',\n      monthOfBirth: '',\n      include: 'roles,departments,contracts',\n      sort: 'status:-1,id:-1'\n    }\n  };\n};\n/**\n * state\n */\n\n\nvar state = {\n  employees: initState().employees,\n  employee: initState().employee,\n  params: initState().params\n  /**\n   * actions\n   */\n\n};\nvar actions = {\n  setEmployee: function setEmployee(_ref, payload) {\n    var commit = _ref.commit;\n    var employees = payload.employees;\n    commit(SET_EMPLOYEES, employees);\n  },\n  getEmployees: function getEmployees(_ref2, payload) {\n    var commit = _ref2.commit,\n        dispatch = _ref2.dispatch;\n\n    var _ref3 = payload || {},\n        cb = _ref3.cb,\n        params = _ref3.params;\n\n    dispatch('fetchApi', {\n      url: \"employees\",\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_EMPLOYEES, response.data);\n        cb(response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  getEmployeesForm: function getEmployeesForm(_ref4, payload) {\n    var dispatch = _ref4.dispatch;\n\n    var _ref5 = payload || {},\n        cb = _ref5.cb,\n        params = _ref5.params;\n\n    dispatch('fetchApi', {\n      url: \"employees\",\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        // commit(SET_EMPLOYEES, response.data)\n        cb(response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  uploadItem: function uploadItem(_ref6, payload) {\n    var commit = _ref6.commit,\n        dispatch = _ref6.dispatch;\n    var cb = payload.cb,\n        data = payload.data;\n    dispatch('fetchApi', {\n      url: 'employees/upload',\n      method: 'POST',\n      data: data,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  getEmployee: function getEmployee(_ref7, payload) {\n    var commit = _ref7.commit,\n        dispatch = _ref7.dispatch;\n\n    var _ref8 = payload || {},\n        employeeId = _ref8.employeeId,\n        params = _ref8.params,\n        cb = _ref8.cb;\n\n    dispatch('fetchApi', {\n      url: \"employees/\".concat(employeeId),\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_EMPLOYEE, response.data);\n        cb && cb(response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  fetchEmployee: function fetchEmployee(_ref9, payload) {\n    var commit = _ref9.commit,\n        dispatch = _ref9.dispatch;\n\n    var _ref10 = payload || {},\n        params = _ref10.params,\n        error = _ref10.error;\n\n    dispatch('fetchApi', {\n      url: \"employees\",\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_EMPLOYEE, response.data);\n      },\n      error: error\n    }, {\n      root: true\n    });\n  },\n  createEmployee: function createEmployee(_ref11, payload) {\n    var commit = _ref11.commit,\n        dispatch = _ref11.dispatch;\n    var employee = payload.employee,\n        cb = payload.cb,\n        params = payload.params,\n        error = payload.error;\n    dispatch('fetchApi', {\n      url: 'employees',\n      method: 'POST',\n      data: employee,\n      params: params,\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  },\n  updateStatusEmployee: function updateStatusEmployee(_ref12, payload) {\n    var commit = _ref12.commit,\n        dispatch = _ref12.dispatch;\n    var id = payload.id,\n        employee = payload.employee,\n        cb = payload.cb;\n    dispatch('fetchApi', {\n      url: \"employees/change-status/\".concat(id),\n      method: 'PUT',\n      data: employee,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  updateEmployee: function updateEmployee(_ref13, payload) {\n    var commit = _ref13.commit,\n        dispatch = _ref13.dispatch;\n    var error = payload.error,\n        id = payload.id,\n        employee = payload.employee,\n        cb = payload.cb,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: \"employees/\".concat(id),\n      method: 'PUT',\n      data: employee,\n      params: params,\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  },\n  deleteEmployee: function deleteEmployee(_ref14, payload) {\n    var commit = _ref14.commit,\n        dispatch = _ref14.dispatch;\n\n    var _ref15 = payload || {},\n        id = _ref15.id,\n        cb = _ref15.cb,\n        error = _ref15.error;\n\n    dispatch('fetchApi', {\n      url: \"employees/\".concat(id),\n      method: 'DELETE',\n      success: function success(response) {\n        commit(SET_EMPLOYEES, response.data);\n        cb && cb(response.data);\n      },\n      error: error\n    }, {\n      root: true\n    });\n  },\n  clearFilter: function clearFilter(_ref16) {\n    var commit = _ref16.commit;\n    commit('resetFilter');\n  },\n  clearFilterBranch: function clearFilterBranch(_ref17) {\n    var commit = _ref17.commit;\n    commit('clearBranch');\n  },\n  clearFilterDateBirth: function clearFilterDateBirth(_ref18) {\n    var commit = _ref18.commit;\n    commit('clearDateBirth');\n  },\n  clearFilterDateFirstContract: function clearFilterDateFirstContract(_ref19) {\n    var commit = _ref19.commit;\n    commit('clearDateFirstContract');\n  }\n};\n/**\n * mutations\n */\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, SET_EMPLOYEES, function (state, employees) {\n  state.employees = employees;\n}), _defineProperty(_mutations, SET_EMPLOYEE, function (state, employee) {\n  state.employee = employee;\n}), _defineProperty(_mutations, SET_INITIAL_STATE, function (state) {\n  state.employees = initState().employees;\n  state.employee = initState().employee;\n  state.params = initState().params;\n}), _defineProperty(_mutations, \"updateField\", updateField), _defineProperty(_mutations, \"resetFilter\", function resetFilter(state) {\n  state.params.q = '';\n  state.params.status = '';\n  state.params.departmentId = '';\n  state.params.branchId = '';\n  state.params.positionId = '';\n  state.params.dateOfBirth = '';\n  state.params.monthOfBirth = '';\n  state.params.contractType = '';\n  state.params.dateOfFirstContract = '';\n  state.params.dateExpiration = '';\n}), _defineProperty(_mutations, \"clearBranch\", function clearBranch(state) {\n  state.params.departmentId = '';\n}), _defineProperty(_mutations, \"clearDateBirth\", function clearDateBirth(state) {\n  state.params.dateOfBirth = '';\n}), _defineProperty(_mutations, \"clearDateFirstContract\", function clearDateFirstContract(state) {\n  state.params.dateOfFirstContract = '';\n}), _mutations);\n/**\n * getters\n */\n\nvar getters = {\n  employeeDetail: function employeeDetail(state) {\n    return state.employee;\n  },\n  employeeAll: function employeeAll(state) {\n    return state.employees;\n  },\n  filterParams: function filterParams(state) {\n    return state.params;\n  },\n  getField: getField\n};\nexport default {\n  namespaced: true,\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/employee.js"],"names":["SET_EMPLOYEE","SET_EMPLOYEES","SET_INITIAL_STATE","getField","updateField","initState","employees","employee","params","q","status","branchId","departmentId","positionId","contractType","dateOfFirstContract","dateExpiration","dateOfBirth","monthOfBirth","include","sort","state","actions","setEmployee","payload","commit","getEmployees","dispatch","cb","url","method","success","response","data","root","getEmployeesForm","uploadItem","getEmployee","employeeId","fetchEmployee","error","createEmployee","updateStatusEmployee","id","updateEmployee","deleteEmployee","clearFilter","clearFilterBranch","clearFilterDateBirth","clearFilterDateFirstContract","mutations","getters","employeeDetail","employeeAll","filterParams","namespaced"],"mappings":"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","sourcesContent":["import {\n  SET_EMPLOYEE,\n  SET_EMPLOYEES,\n  SET_INITIAL_STATE\n} from '../mutation-types'\nimport { getField, updateField } from 'vuex-map-fields'\nconst initState = () => {\n  return {\n    employees: [],\n    employee: {},\n    params: {\n      q: '',\n      status: '',\n      branchId: '',\n      departmentId: '',\n      positionId: '',\n      contractType: '',\n      dateOfFirstContract: '',\n      dateExpiration: '',\n      dateOfBirth: '',\n      monthOfBirth: '',\n      include: 'roles,departments,contracts',\n      sort: 'status:-1,id:-1'\n    }\n  }\n}\n\n/**\n * state\n */\nconst state = {\n  employees: initState().employees,\n  employee: initState().employee,\n  params: initState().params\n}\n\n/**\n * actions\n */\nconst actions = {\n  setEmployee ({ commit }, payload) {\n    let { employees } = payload\n    commit(SET_EMPLOYEES, employees)\n  },\n  getEmployees ({ commit, dispatch }, payload) {\n    let { cb, params } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `employees`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_EMPLOYEES, response.data)\n          cb(response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  getEmployeesForm ({ dispatch }, payload) {\n    let { cb, params } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `employees`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          // commit(SET_EMPLOYEES, response.data)\n          cb(response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  uploadItem ({ commit, dispatch }, payload) {\n    let { cb, data } = payload\n    dispatch('fetchApi', {\n      url: 'employees/upload',\n      method: 'POST',\n      data: data,\n      success: cb\n    }, { root: true })\n  },\n  getEmployee ({ commit, dispatch }, payload) {\n    let { employeeId, params, cb } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `employees/${employeeId}`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_EMPLOYEE, response.data)\n          cb && cb(response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  fetchEmployee ({ commit, dispatch }, payload) {\n    let { params, error } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `employees`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_EMPLOYEE, response.data)\n        },\n        error: error\n      },\n      { root: true }\n    )\n  },\n  createEmployee ({ commit, dispatch }, payload) {\n    let { employee, cb, params, error } = payload\n    dispatch('fetchApi', {\n      url: 'employees',\n      method: 'POST',\n      data: employee,\n      params: params,\n      success: cb,\n      error: error\n    }, { root: true })\n  },\n  updateStatusEmployee ({ commit, dispatch }, payload) {\n    let { id, employee, cb } = payload\n    dispatch('fetchApi', {\n      url: `employees/change-status/${id}`,\n      method: 'PUT',\n      data: employee,\n      success: cb\n    }, { root: true })\n  },\n  updateEmployee ({ commit, dispatch }, payload) {\n    let { error, id, employee, cb, params } = payload\n    dispatch('fetchApi', {\n      url: `employees/${id}`,\n      method: 'PUT',\n      data: employee,\n      params: params,\n      success: cb,\n      error: error\n    }, { root: true })\n  },\n  deleteEmployee ({ commit, dispatch }, payload) {\n    let { id, cb, error } = payload || {}\n    dispatch('fetchApi', {\n      url: `employees/${id}`,\n      method: 'DELETE',\n      success: (response) => {\n        commit(SET_EMPLOYEES, response.data)\n        cb && cb(response.data)\n      },\n      error: error\n    }, { root: true })\n  },\n  clearFilter ({ commit }) {\n    commit('resetFilter')\n  },\n  clearFilterBranch ({ commit }) {\n    commit('clearBranch')\n  },\n  clearFilterDateBirth ({ commit }) {\n    commit('clearDateBirth')\n  },\n  clearFilterDateFirstContract ({ commit }) {\n    commit('clearDateFirstContract')\n  }\n}\n\n/**\n * mutations\n */\nconst mutations = {\n  [SET_EMPLOYEES]: (state, employees) => {\n    state.employees = employees\n  },\n  [SET_EMPLOYEE]: (state, employee) => {\n    state.employee = employee\n  },\n  [SET_INITIAL_STATE]: (state) => {\n    state.employees = initState().employees\n    state.employee = initState().employee\n    state.params = initState().params\n  },\n  updateField,\n  // clear toàn bộ tính năng lọc\n  resetFilter (state) {\n    state.params.q = ''\n    state.params.status = ''\n    state.params.departmentId = ''\n    state.params.branchId = ''\n    state.params.positionId = ''\n    state.params.dateOfBirth = ''\n    state.params.monthOfBirth = ''\n    state.params.contractType = ''\n    state.params.dateOfFirstContract = ''\n    state.params.dateExpiration = ''\n  },\n  // clear khi clear branch thì department cũng clear luôn\n  clearBranch (state) {\n    state.params.departmentId = ''\n  },\n  clearDateBirth (state) {\n    state.params.dateOfBirth = ''\n  },\n  clearDateFirstContract (state) {\n    state.params.dateOfFirstContract = ''\n  }\n\n}\n\n/**\n * getters\n */\nconst getters = {\n  employeeDetail: (state) => state.employee,\n  employeeAll: (state) => state.employees,\n  filterParams: (state) => state.params,\n  getField\n}\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters\n}\n"]}]}