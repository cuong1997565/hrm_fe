{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/quasar-calendar/src/components/calendar/CalendarMonth.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/quasar-calendar/src/components/calendar/CalendarMonth.vue","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1538403001796},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CalendarMixin from './mixins/CalendarMixin';\nimport CalendarEventMixin from './mixins/CalendarEventMixin';\nimport CalendarParentComponentMixin from './mixins/CalendarParentComponentMixin';\nimport { QBtn, QTooltip, QTabs, QTab, QTabPane, QScrollArea } from 'quasar';\nimport QuantityBubble from './QuantityBubble';\nimport CalendarEvent from './CalendarEvent';\nimport CalendarDayLabels from './CalendarDayLabels';\nimport CalendarHeaderNav from './CalendarHeaderNav';\nimport CalendarEventDetail from './CalendarEventDetail';\n\nvar _require = require('luxon'),\n    DateTime = _require.DateTime;\n\nexport default {\n  name: 'CalendarMonth',\n  components: {\n    QuantityBubble: QuantityBubble,\n    CalendarEvent: CalendarEvent,\n    CalendarDayLabels: CalendarDayLabels,\n    CalendarHeaderNav: CalendarHeaderNav,\n    CalendarEventDetail: CalendarEventDetail,\n    QBtn: QBtn,\n    QTooltip: QTooltip,\n    QTabs: QTabs,\n    QTab: QTab,\n    QTabPane: QTabPane,\n    QScrollArea: QScrollArea\n  },\n  mixins: [CalendarParentComponentMixin, CalendarMixin, CalendarEventMixin],\n  props: {\n    fullComponentRef: String\n  },\n  data: function data() {\n    return {\n      dayCellHeight: 5,\n      dayCellHeightUnit: 'rem',\n      workingDate: new Date(),\n      weekArray: [],\n      parsed: this.getDefaultParsed(),\n      eventDetailEventObject: {}\n    };\n  },\n  computed: {\n    calendarDaysAreClickable: function calendarDaysAreClickable() {\n      return this.fullComponentRef && this.fullComponentRef.length > 0;\n    }\n  },\n  methods: {\n    monthGetDateEvents: function monthGetDateEvents(dateObject) {\n      return this.dateGetEvents(dateObject);\n    },\n    doUpdate: function doUpdate() {\n      this.mountSetDate();\n      this.generateCalendarCellArray();\n    },\n    getCalendarCellArray: function getCalendarCellArray(monthNumber, yearNumber) {\n      var currentDay = this.makeDT(DateTime.fromObject({\n        year: yearNumber,\n        month: monthNumber,\n        day: 1\n      }));\n      var currentWeekOfYear = this.getWeekNumber(currentDay, this.sundayFirstDayOfWeek);\n      var weekArray = [];\n      var currentWeekArray = [];\n      var thisDayObject = {};\n\n      for (var thisDateOfMonth = 1; thisDateOfMonth <= 31; thisDateOfMonth++) {\n        currentDay = this.makeDT(DateTime.fromObject({\n          year: yearNumber,\n          month: monthNumber,\n          day: thisDateOfMonth\n        }));\n\n        if (currentDay.year === yearNumber && currentDay.month === monthNumber) {\n          if (this.getWeekNumber(currentDay, this.sundayFirstDayOfWeek) !== currentWeekOfYear) {\n            weekArray.push(currentWeekArray);\n            currentWeekOfYear = this.getWeekNumber(currentDay, this.sundayFirstDayOfWeek);\n            currentWeekArray = [];\n          }\n\n          thisDayObject = {\n            dateObject: currentDay,\n            year: currentDay.year,\n            month: currentDay.month,\n            date: currentDay.day,\n            dayName: currentDay.toFormat('EEEE'),\n            dayNumber: currentDay.weekday\n          };\n          currentWeekArray.push(thisDayObject);\n        }\n      }\n\n      if (weekArray.length > 0) {\n        weekArray.push(currentWeekArray);\n      }\n\n      return weekArray;\n    },\n    generateCalendarCellArray: function generateCalendarCellArray() {\n      this.weekArray = this.getCalendarCellArray(this.makeDT(this.workingDate).month, this.makeDT(this.workingDate).year);\n    },\n    handleNavMove: function handleNavMove(params) {\n      this.moveTimePeriod(params);\n      this.$emit(this.eventRef + ':navMovePeriod', {\n        unitType: params.unitType,\n        amount: params.amount\n      });\n      this.generateCalendarCellArray();\n    },\n    handleDayClick: function handleDayClick(dateObject) {\n      if (this.fullComponentRef) {\n        this.fullMoveToDay(dateObject);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.doUpdate();\n    this.handlePassedInEvents();\n    this.$root.$on(this.eventRef + ':navMovePeriod', this.handleNavMove);\n    this.$root.$on('click-event-' + this.eventRef, this.handleEventDetailEvent);\n    this.$root.$on('update-event-' + this.eventRef, this.handleEventUpdate);\n  },\n  watch: {\n    startDate: 'handleStartChange',\n    eventArray: function eventArray() {\n      this.getPassedInEventArray();\n    },\n    parsedEvents: function parsedEvents() {\n      this.getPassedInParsedEvents();\n    }\n  }\n};",{"version":3,"sources":["CalendarMonth.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"calendar-month\">\n\n    <!-- calendar header -->\n    <calendar-header-nav\n      time-period-unit=\"month\"\n      :time-period-amount=\"1\"\n      :move-time-period-emit=\"eventRef + ':navMovePeriod'\"\n    >\n      {{ formatDate(workingDate, 'MMMM yyyy') }}\n    </calendar-header-nav>\n\n    <div class=\"calendar-content\">\n      <calendar-day-labels\n        :number-of-days=\"7\"\n        :start-date=\"workingDate\"\n        :force-start-of-week=\"true\"\n        :sunday-first-day-of-week=\"sundayFirstDayOfWeek\"\n        :calendar-locale=\"calendarLocale\"\n      />\n      <div\n        v-for=\"(thisWeek, index) in weekArray\"\n        :key=\"index\"\n        :class=\"{\n          'calendar-multi-day': true,\n          'row': true,\n          'no-wrap': true,\n          'items-start': true,\n          'justify-end': index < (weekArray.length - 1),\n          'justify-start': index === (weekArray.length - 1)\n        }\"\n      >\n        <div\n          :class=\"{\n            'calendar-day': true,\n            'calendar-cell': true,\n            'calendar-day-weekend': isWeekendDay(thisDay.dateObject),\n            'calendar-day-current': isCurrentDate(thisDay.dateObject)\n          }\"\n          v-for=\"(thisDay, weekDayIndex) in thisWeek\"\n          :key=\"makeDT(thisDay.dateObject).toISODate()\"\n        >\n          <div\n            v-if=\"isCurrentDate(thisDay.dateObject)\"\n            :class=\"{\n              'calendar-day-number': true,\n              'cursor-pointer': calendarDaysAreClickable\n            }\"\n            @click=\"handleDayClick(thisDay.dateObject)\"\n          >\n            <quantity-bubble\n              :quantity=\"thisDay.dateObject.day\"\n              :offset=\"false\"\n            />\n          </div>\n          <div\n            v-else\n            :class=\"{\n              'calendar-day-number': true,\n              'cursor-pointer': calendarDaysAreClickable\n            }\"\n            @click=\"handleDayClick(thisDay.dateObject)\"\n          >\n            {{ thisDay.dateObject.day }}\n          </div>\n          <div class=\"calendar-day-content\">\n            <template v-if=\"hasAnyEvents(thisDay.dateObject)\">\n              <div\n                v-for=\"thisEvent in monthGetDateEvents(thisDay.dateObject)\"\n                :key=\"thisEvent.id\"\n              >\n                <calendar-event\n                  :event-object=\"thisEvent\"\n                  :month-style=\"true\"\n                  :event-ref=\"eventRef\"\n                  :prevent-event-detail=\"preventEventDetail\"\n                  :current-calendar-day=\"thisDay.dateObject\"\n                  :has-previous-day=\"thisEvent.hasPrev\"\n                  :has-next-day=\"thisEvent.hasNext\"\n                  :first-day-of-week=\"(weekDayIndex === 0)\"\n                  :last-day-of-week=\"(weekDayIndex === (thisWeek.length -1))\"\n                  :allow-editing=\"allowEditing\"\n                />\n              </div>\n            </template>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <calendar-event-detail\n      ref=\"defaultEventDetail\"\n      v-if=\"!preventEventDetail\"\n      :event-object=\"eventDetailEventObject\"\n      :calendar-locale=\"calendarLocale\"\n      :calendar-timezone=\"calendarTimezone\"\n      :event-ref=\"eventRef\"\n      :allow-editing=\"allowEditing\"\n    />\n\n  </div>\n</template>\n\n<script>\n  import CalendarMixin from './mixins/CalendarMixin'\n  import CalendarEventMixin from './mixins/CalendarEventMixin'\n  import CalendarParentComponentMixin from './mixins/CalendarParentComponentMixin'\n  import {\n    QBtn,\n    QTooltip,\n    QTabs,\n    QTab,\n    QTabPane,\n    QScrollArea\n  } from 'quasar'\n  import QuantityBubble from './QuantityBubble'\n  import CalendarEvent from './CalendarEvent'\n  import CalendarDayLabels from './CalendarDayLabels'\n  import CalendarHeaderNav from './CalendarHeaderNav'\n  import CalendarEventDetail from './CalendarEventDetail'\n  const { DateTime } = require('luxon')\n  export default {\n    name: 'CalendarMonth',\n    components: {\n      QuantityBubble,\n      CalendarEvent,\n      CalendarDayLabels,\n      CalendarHeaderNav,\n      CalendarEventDetail,\n      QBtn,\n      QTooltip,\n      QTabs,\n      QTab,\n      QTabPane,\n      QScrollArea\n    },\n    mixins: [CalendarParentComponentMixin, CalendarMixin, CalendarEventMixin],\n    props: {\n      fullComponentRef: String\n    },\n    data () {\n      return {\n        dayCellHeight: 5,\n        dayCellHeightUnit: 'rem',\n        workingDate: new Date(),\n        weekArray: [],\n        parsed: this.getDefaultParsed(),\n        eventDetailEventObject: {}\n      }\n    },\n    computed: {\n      calendarDaysAreClickable: function () {\n        return (this.fullComponentRef && this.fullComponentRef.length > 0)\n      }\n    },\n    methods: {\n      monthGetDateEvents: function (dateObject) {\n        return this.dateGetEvents(dateObject)\n      },\n      doUpdate: function () {\n        this.mountSetDate()\n        this.generateCalendarCellArray()\n      },\n      getCalendarCellArray: function (monthNumber, yearNumber) {\n        let currentDay = this.makeDT(\n          DateTime.fromObject({\n            year: yearNumber,\n            month: monthNumber,\n            day: 1\n          })\n        )\n        let currentWeekOfYear = this.getWeekNumber(currentDay, this.sundayFirstDayOfWeek)\n        let weekArray = []\n        let currentWeekArray = []\n        let thisDayObject = {}\n        for (let thisDateOfMonth = 1; thisDateOfMonth <= 31; thisDateOfMonth++) {\n          currentDay = this.makeDT(\n            DateTime.fromObject({\n              year: yearNumber,\n              month: monthNumber,\n              day: thisDateOfMonth\n            })\n          )\n          if (\n            currentDay.year === yearNumber &&\n            currentDay.month === monthNumber\n          ) {\n            if (\n              this.getWeekNumber(currentDay, this.sundayFirstDayOfWeek) !== currentWeekOfYear\n            ) {\n              weekArray.push(currentWeekArray)\n              currentWeekOfYear = this.getWeekNumber(currentDay, this.sundayFirstDayOfWeek)\n              currentWeekArray = []\n            }\n            thisDayObject = {\n              dateObject: currentDay,\n              year: currentDay.year,\n              month: currentDay.month,\n              date: currentDay.day,\n              dayName: currentDay.toFormat('EEEE'),\n              dayNumber: currentDay.weekday\n            }\n            currentWeekArray.push(thisDayObject)\n          }\n        }\n        if (weekArray.length > 0) {\n          weekArray.push(currentWeekArray)\n        }\n        return weekArray\n      },\n      generateCalendarCellArray: function () {\n        this.weekArray = this.getCalendarCellArray(\n          this.makeDT(this.workingDate).month,\n          this.makeDT(this.workingDate).year\n        )\n      },\n      handleNavMove: function (params) {\n        this.moveTimePeriod(params)\n        this.$emit(\n          this.eventRef + ':navMovePeriod',\n          {\n            unitType: params.unitType,\n            amount: params.amount\n          }\n        )\n        this.generateCalendarCellArray()\n      },\n      handleDayClick: function (dateObject) {\n        if (this.fullComponentRef) {\n          this.fullMoveToDay(dateObject)\n        }\n      }\n    },\n    mounted () {\n      this.doUpdate()\n      this.handlePassedInEvents()\n      this.$root.$on(\n        this.eventRef + ':navMovePeriod',\n        this.handleNavMove\n      )\n      this.$root.$on(\n        'click-event-' + this.eventRef,\n        this.handleEventDetailEvent\n      )\n      this.$root.$on(\n        'update-event-' + this.eventRef,\n        this.handleEventUpdate\n      )\n    },\n    watch: {\n      startDate: 'handleStartChange',\n      eventArray: function () {\n        this.getPassedInEventArray()\n      },\n      parsedEvents: function () {\n        this.getPassedInParsedEvents()\n      }\n    }\n  }\n</script>\n\n<style lang=\"stylus\">\n  @import 'calendar.vars.styl'\n\n  .calendar-month\n\n    .calendar-time-width\n      width $dayTimeLabelWidth\n    .calendar-time-margin\n      margin-left $dayTimeLabelWidth\n\n    .calendar-header\n      .calendar-header-label\n        font-size 1.25em\n        font-weight bold\n    .calendar-content\n      padding 4px 12px\n      .calendar-cell\n        width $cellWidth\n        max-width $cellWidth\n        padding 0\n      .calendar-day-labels\n        .calendar-day-label\n          font-size 1.1em\n        .calendar-day-label-current\n          font-weight bold\n      .calendar-multi-day\n        border-bottom 1px solid $borderColor\n        :last-child\n          border-bottom none\n      .calendar-day\n        background-color none\n        height $cellHeight\n        max-height $cellHeight\n        overflow hidden\n        width $sevenCellWidth\n        .calendar-day-number\n          font-size 0.9em\n          height 2em\n          width 2em\n          vertical-align middle\n          padding-top .25em\n          padding-left .25em\n      .calendar-day-current\n        background-color $currentDayBackgroundColor\n      .calendar-day-weekend\n        background-color $weekendDayBackgroundColor\n\n</style>\n"],"sourceRoot":"node_modules/quasar-calendar/src/components/calendar"}]}