{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js??ref--13-0!/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/branch.js","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/branch.js","mtime":1541040965622},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1538403001796},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\n\nvar _mutations;\n\nimport { SET_INITIAL_STATE, SET_BRANCHS, SET_BRANCH } from '../mutation-types';\nimport { getField, updateField } from 'vuex-map-fields';\n\nvar initState = function initState() {\n  return {\n    branchs: [],\n    branch: {},\n    params: {\n      q: '',\n      cityId: '',\n      districtId: '',\n      sort: 'type:-1,status:-1,id:-1'\n    }\n  };\n};\n\nvar state = {\n  branchs: initState().branchs,\n  branch: initState().branch,\n  params: initState().params\n};\nvar actions = {\n  setBranch: function setBranch(_ref, payload) {\n    var commit = _ref.commit;\n    var branchs = payload.branchs;\n    commit(SET_BRANCHS, branchs);\n  },\n  getBranchs: function getBranchs(_ref2, payload) {\n    var commit = _ref2.commit,\n        dispatch = _ref2.dispatch;\n\n    var _ref3 = payload || {},\n        cb = _ref3.cb,\n        params = _ref3.params;\n\n    dispatch('fetchApi', {\n      url: \"branches\",\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_BRANCHS, response.data);\n        cb(response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  getBranch: function getBranch(_ref4, payload) {\n    var commit = _ref4.commit,\n        dispatch = _ref4.dispatch;\n    var branchId = payload.branchId,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: \"branches/\".concat(branchId),\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_BRANCH, response.data);\n        console.log('data get branch ', response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  getBranchForUser: function getBranchForUser(_ref5, payload) {\n    var commit = _ref5.commit,\n        dispatch = _ref5.dispatch;\n    dispatch('fetchApi', {\n      url: \"branches\",\n      method: 'GET',\n      success: function success(response) {\n        commit(SET_BRANCHS, response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  createBranch: function createBranch(_ref6, payload) {\n    var commit = _ref6.commit,\n        dispatch = _ref6.dispatch;\n    var error = payload.error,\n        branch = payload.branch,\n        cb = payload.cb,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: 'branches',\n      method: 'POST',\n      data: branch,\n      params: params,\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  },\n  updateBranch: function updateBranch(_ref7, payload) {\n    var commit = _ref7.commit,\n        dispatch = _ref7.dispatch;\n\n    var _ref8 = payload || {},\n        error = _ref8.error,\n        id = _ref8.id,\n        branch = _ref8.branch,\n        cb = _ref8.cb,\n        params = _ref8.params;\n\n    dispatch('fetchApi', {\n      url: \"branches/\".concat(id),\n      method: 'PUT',\n      data: branch,\n      params: params,\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  },\n  updateTypeBranch: function updateTypeBranch(_ref9, payload) {\n    var commit = _ref9.commit,\n        dispatch = _ref9.dispatch;\n\n    var _ref10 = payload || {},\n        id = _ref10.id,\n        branch = _ref10.branch,\n        cb = _ref10.cb,\n        params = _ref10.params;\n\n    dispatch('fetchApi', {\n      url: \"/branches/change-branch-main/\".concat(id),\n      method: 'PUT',\n      data: branch,\n      params: params,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  updateStatusBranch: function updateStatusBranch(_ref11, payload) {\n    var commit = _ref11.commit,\n        dispatch = _ref11.dispatch;\n    var id = payload.id,\n        cb = payload.cb;\n    dispatch('fetchApi', {\n      url: \"branches/change-status/\".concat(id),\n      method: 'PUT',\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  deleteBranch: function deleteBranch(_ref12, payload) {\n    var commit = _ref12.commit,\n        dispatch = _ref12.dispatch;\n\n    var _ref13 = payload || {},\n        id = _ref13.id,\n        cb = _ref13.cb,\n        error = _ref13.error;\n\n    dispatch('fetchApi', {\n      url: \"branches/\".concat(id),\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  },\n  clearFilter: function clearFilter(_ref14) {\n    var commit = _ref14.commit;\n    commit('resetFilter');\n  },\n  clearFilterCity: function clearFilterCity(_ref15) {\n    var commit = _ref15.commit;\n    commit('clearDistrictByCity');\n  }\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, SET_BRANCHS, function (state, branchs) {\n  state.branchs = branchs;\n}), _defineProperty(_mutations, SET_BRANCH, function (state, branch) {\n  state.branch = branch;\n}), _defineProperty(_mutations, SET_INITIAL_STATE, function (state) {\n  state.branchs = initState().branchs;\n  state.branch = initState().branch;\n  state.params = initState().params;\n}), _defineProperty(_mutations, \"updateField\", updateField), _defineProperty(_mutations, \"resetFilter\", function resetFilter(state) {\n  state.params.q = '';\n  state.params.cityId = '';\n  state.params.districtId = '';\n}), _defineProperty(_mutations, \"clearDistrictByCity\", function clearDistrictByCity(state) {\n  state.params.districtId = '';\n}), _mutations);\nvar getters = {\n  branchAll: function branchAll(state) {\n    return state.branchs;\n  },\n  branchDetail: function branchDetail(state) {\n    return state.branch;\n  },\n  filterParams: function filterParams(state) {\n    return state.params;\n  },\n  getField: getField\n};\nexport default {\n  namespaced: true,\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/branch.js"],"names":["SET_INITIAL_STATE","SET_BRANCHS","SET_BRANCH","getField","updateField","initState","branchs","branch","params","q","cityId","districtId","sort","state","actions","setBranch","payload","commit","getBranchs","dispatch","cb","url","method","success","response","data","root","getBranch","branchId","console","log","getBranchForUser","createBranch","error","updateBranch","id","updateTypeBranch","updateStatusBranch","deleteBranch","clearFilter","clearFilterCity","mutations","getters","branchAll","branchDetail","filterParams","namespaced"],"mappings":"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","sourcesContent":["import {\n  SET_INITIAL_STATE,\n  SET_BRANCHS,\n  SET_BRANCH\n} from '../mutation-types'\nimport { getField, updateField } from 'vuex-map-fields'\nconst initState = () => {\n  return {\n    branchs: [],\n    branch: {},\n    params: {\n      q: '',\n      cityId: '',\n      districtId: '',\n      sort: 'type:-1,status:-1,id:-1'\n    }\n  }\n}\n\nconst state = {\n  branchs: initState().branchs,\n  branch: initState().branch,\n  params: initState().params\n}\nconst actions = {\n  setBranch ({ commit }, payload) {\n    let { branchs } = payload\n    commit(SET_BRANCHS, branchs)\n  },\n  getBranchs ({ commit, dispatch }, payload) {\n    let { cb, params } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `branches`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_BRANCHS, response.data)\n          cb(response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  getBranch ({ commit, dispatch }, payload) {\n    let { branchId, params } = payload\n    dispatch(\n      'fetchApi',\n      {\n        url: `branches/${branchId}`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_BRANCH, response.data)\n          console.log('data get branch ', response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  getBranchForUser ({ commit, dispatch }, payload) {\n    dispatch(\n      'fetchApi',\n      {\n        url: `branches`,\n        method: 'GET',\n        success: (response) => {\n          commit(SET_BRANCHS, response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  createBranch ({ commit, dispatch }, payload) {\n    let { error, branch, cb, params } = payload\n    dispatch('fetchApi', {\n      url: 'branches',\n      method: 'POST',\n      data: branch,\n      params: params,\n      success: cb,\n      error: error\n    }, { root: true })\n  },\n  updateBranch ({ commit, dispatch }, payload) {\n    let { error, id, branch, cb, params } = payload || {}\n    dispatch('fetchApi', {\n      url: `branches/${id}`,\n      method: 'PUT',\n      data: branch,\n      params: params,\n      success: cb,\n      error: error\n    }, { root: true })\n  },\n  updateTypeBranch ({ commit, dispatch }, payload) {\n    let { id, branch, cb, params } = payload || {}\n    dispatch('fetchApi', {\n      url: `/branches/change-branch-main/${id}`,\n      method: 'PUT',\n      data: branch,\n      params: params,\n      success: cb\n    }, { root: true })\n  },\n  updateStatusBranch ({ commit, dispatch }, payload) {\n    let { id, cb } = payload\n    dispatch('fetchApi', {\n      url: `branches/change-status/${id}`,\n      method: 'PUT',\n      success: cb\n    }, { root: true })\n  },\n  deleteBranch ({ commit, dispatch }, payload) {\n    let { id, cb, error } = payload || {}\n    dispatch('fetchApi', {\n      url: `branches/${id}`,\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, { root: true })\n  },\n  clearFilter ({ commit }) {\n    commit('resetFilter')\n  },\n  clearFilterCity ({ commit }) {\n    commit('clearDistrictByCity')\n  }\n}\nconst mutations = {\n  [SET_BRANCHS]: (state, branchs) => {\n    state.branchs = branchs\n  },\n  [SET_BRANCH]: (state, branch) => {\n    state.branch = branch\n  },\n  [SET_INITIAL_STATE]: (state) => {\n    state.branchs = initState().branchs\n    state.branch = initState().branch\n    state.params = initState().params\n  },\n  updateField,\n  resetFilter (state) {\n    state.params.q = ''\n    state.params.cityId = ''\n    state.params.districtId = ''\n  },\n  clearDistrictByCity (state) {\n    state.params.districtId = ''\n  }\n\n}\n\nconst getters = {\n  branchAll: (state) => state.branchs,\n  branchDetail: (state) => state.branch,\n  filterParams: (state) => state.params,\n  getField\n}\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters\n}\n"]}]}