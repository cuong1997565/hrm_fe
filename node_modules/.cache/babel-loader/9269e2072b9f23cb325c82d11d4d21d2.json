{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js??ref--13-0!/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/setting.js","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/setting.js","mtime":1540521856971},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1538403001796},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\nimport _regeneratorRuntime from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\n\nvar _mutations;\n\nimport { SET_SETTINGS, SET_INITIAL_STATE, REMOVE_SETTING } from '../mutation-types';\nimport { getField, updateField } from 'vuex-map-fields';\n\nvar initState = function initState() {\n  return {\n    settings: {},\n    params: {\n      q: ''\n    }\n  };\n};\n/**\n * state\n */\n\n\nvar state = {\n  settings: initState().settings,\n  params: initState().params\n  /**\n   * actions\n   */\n\n};\nvar actions = {\n  FetchSetting: function FetchSetting(_ref, payload) {\n    var commit = _ref.commit,\n        dispatch = _ref.dispatch;\n\n    var _ref2 = payload || {},\n        params = _ref2.params;\n\n    dispatch('fetchApi', {\n      url: \"settings?sort=status:-1,id:-1\",\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_SETTINGS, response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  getSetting: function getSetting(_ref3, payload) {\n    var commit = _ref3.commit,\n        dispatch = _ref3.dispatch;\n\n    var _ref4 = payload || {},\n        settingId = _ref4.settingId,\n        params = _ref4.params;\n\n    dispatch('fetchApi', {\n      url: \"settings/\".concat(settingId),\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_SETTINGS, response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  setSetting: function setSetting(_ref5, payload) {\n    var commit = _ref5.commit;\n\n    var _ref6 = payload || {},\n        settings = _ref6.settings;\n\n    if (settings) {\n      commit(SET_SETTINGS, settings);\n    }\n  },\n  createSetting: function createSetting(_ref7, payload) {\n    var commit = _ref7.commit,\n        dispatch = _ref7.dispatch;\n    var setting = payload.setting,\n        cb = payload.cb,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: 'settings',\n      method: 'POST',\n      data: setting,\n      params: params,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  updateSetting: function updateSetting(_ref8, payload) {\n    var commit = _ref8.commit,\n        dispatch = _ref8.dispatch;\n    var id = payload.id,\n        setting = payload.setting,\n        cb = payload.cb,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: \"settings/\".concat(id),\n      method: 'PUT',\n      data: setting,\n      params: params,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  updateStatusSetting: function updateStatusSetting(_ref9, payload) {\n    var commit = _ref9.commit,\n        dispatch = _ref9.dispatch;\n    var id = payload.id,\n        cb = payload.cb;\n    dispatch('fetchApi', {\n      url: \"settings/change-status/\".concat(id),\n      method: 'PUT',\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  deleteSetting: function () {\n    var _deleteSetting = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(_ref10, payload) {\n      var commit, dispatch, _ref11, id, cb;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref10.commit, dispatch = _ref10.dispatch;\n              _ref11 = payload || {}, id = _ref11.id, cb = _ref11.cb;\n              dispatch('fetchApi', {\n                url: \"settings/\".concat(id),\n                method: 'DELETE',\n                success: function success(response) {\n                  commit(REMOVE_SETTING, id);\n                  cb && cb(response.data);\n                }\n              }, {\n                root: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function deleteSetting(_x, _x2) {\n      return _deleteSetting.apply(this, arguments);\n    };\n  }(),\n  clearFilter: function clearFilter(_ref12) {\n    var commit = _ref12.commit;\n    commit('resetFilter');\n  }\n};\n/**\n * mutations\n */\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, SET_SETTINGS, function (state, settings) {\n  state.settings = settings;\n}), _defineProperty(_mutations, SET_INITIAL_STATE, function (state) {\n  state.settings = initState().settings;\n  state.params = initState().params;\n}), _defineProperty(_mutations, REMOVE_SETTING, function (state, id) {\n  console.log(id);\n  delete state.settings[id];\n  console.log(state.settings[id]);\n}), _defineProperty(_mutations, \"updateField\", updateField), _defineProperty(_mutations, \"resetFilter\", function resetFilter(state) {\n  state.params.q = '';\n}), _mutations);\n/**\n * getters\n */\n\nvar getters = {\n  settingDetail: function settingDetail(state) {\n    return state.settings;\n  },\n  filterParams: function filterParams(state) {\n    return state.params;\n  },\n  getField: getField\n};\nexport default {\n  namespaced: true,\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/setting.js"],"names":["SET_SETTINGS","SET_INITIAL_STATE","REMOVE_SETTING","getField","updateField","initState","settings","params","q","state","actions","FetchSetting","payload","commit","dispatch","url","method","success","response","data","root","getSetting","settingId","setSetting","createSetting","setting","cb","updateSetting","id","updateStatusSetting","deleteSetting","clearFilter","mutations","console","log","getters","settingDetail","filterParams","namespaced"],"mappings":";;;;;;AAAA,SACEA,YADF,EAEEC,iBAFF,EAGEC,cAHF,QAIO,mBAJP;AAKA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,iBAAtC;;AACA,IAAMC,YAAY,SAAZA,SAAY,GAAM;AACtB,SAAO;AACLC,cAAU,EADL;AAELC,YAAQ;AACNC,SAAG;AADG;AAFH,GAAP;AAMD,CAPD;AASA;;;;;AAGA,IAAMC,QAAQ;AACZH,YAAUD,YAAYC,QADV;AAEZC,UAAQF,YAAYE;AAGtB;;;;AALc,CAAd;AAQA,IAAMG,UAAU;AACdC,cADc,8BACsBC,OADtB,EAC+B;AAAA,QAA7BC,MAA6B,QAA7BA,MAA6B;AAAA,QAArBC,QAAqB,QAArBA,QAAqB;;AAAA,gBAC1BF,WAAW,EADe;AAAA,QACrCL,MADqC,SACrCA,MADqC;;AAE3CO,aACE,UADF,EAEE;AACEC,0CADF;AAEEC,cAAQ,KAFV;AAGET,cAAQA,UAAU,EAHpB;AAIEU,eAAS,iBAACC,QAAD,EAAc;AACrBL,eAAOb,YAAP,EAAqBkB,SAASC,IAA9B;AACD;AANH,KAFF,EAUE;AAAEC,YAAM;AAAR,KAVF;AAYD,GAfa;AAgBdC,YAhBc,6BAgBoBT,OAhBpB,EAgB6B;AAAA,QAA7BC,MAA6B,SAA7BA,MAA6B;AAAA,QAArBC,QAAqB,SAArBA,QAAqB;;AAAA,gBACbF,WAAW,EADE;AAAA,QACnCU,SADmC,SACnCA,SADmC;AAAA,QACxBf,MADwB,SACxBA,MADwB;;AAEzCO,aACE,UADF,EAEE;AACEC,8BAAiBO,SAAjB,CADF;AAEEN,cAAQ,KAFV;AAGET,cAAQA,UAAU,EAHpB;AAIEU,eAAS,iBAACC,QAAD,EAAc;AACrBL,eAAOb,YAAP,EAAqBkB,SAASC,IAA9B;AACD;AANH,KAFF,EAUE;AAAEC,YAAM;AAAR,KAVF;AAYD,GA9Ba;AA+BdG,YA/Bc,6BA+BUX,OA/BV,EA+BmB;AAAA,QAAnBC,MAAmB,SAAnBA,MAAmB;;AAAA,gBACZD,WAAW,EADC;AAAA,QACzBN,QADyB,SACzBA,QADyB;;AAE/B,QAAIA,QAAJ,EAAc;AACZO,aAAOb,YAAP,EAAqBM,QAArB;AACD;AACF,GApCa;AAqCdkB,eArCc,gCAqCuBZ,OArCvB,EAqCgC;AAAA,QAA7BC,MAA6B,SAA7BA,MAA6B;AAAA,QAArBC,QAAqB,SAArBA,QAAqB;AAAA,QACtCW,OADsC,GACdb,OADc,CACtCa,OADsC;AAAA,QAC7BC,EAD6B,GACdd,OADc,CAC7Bc,EAD6B;AAAA,QACzBnB,MADyB,GACdK,OADc,CACzBL,MADyB;AAE5CO,aAAS,UAAT,EAAqB;AACnBC,WAAK,UADc;AAEnBC,cAAQ,MAFW;AAGnBG,YAAMM,OAHa;AAInBlB,cAAQA,MAJW;AAKnBU,eAASS;AALU,KAArB,EAMG;AAAEN,YAAM;AAAR,KANH;AAOD,GA9Ca;AA+CdO,eA/Cc,gCA+CuBf,OA/CvB,EA+CgC;AAAA,QAA7BC,MAA6B,SAA7BA,MAA6B;AAAA,QAArBC,QAAqB,SAArBA,QAAqB;AAAA,QACtCc,EADsC,GACVhB,OADU,CACtCgB,EADsC;AAAA,QAClCH,OADkC,GACVb,OADU,CAClCa,OADkC;AAAA,QACzBC,EADyB,GACVd,OADU,CACzBc,EADyB;AAAA,QACrBnB,MADqB,GACVK,OADU,CACrBL,MADqB;AAE5CO,aAAS,UAAT,EAAqB;AACnBC,8BAAiBa,EAAjB,CADmB;AAEnBZ,cAAQ,KAFW;AAGnBG,YAAMM,OAHa;AAInBlB,cAAQA,MAJW;AAKnBU,eAASS;AALU,KAArB,EAMG;AAAEN,YAAM;AAAR,KANH;AAOD,GAxDa;AAyDdS,qBAzDc,sCAyD6BjB,OAzD7B,EAyDsC;AAAA,QAA7BC,MAA6B,SAA7BA,MAA6B;AAAA,QAArBC,QAAqB,SAArBA,QAAqB;AAAA,QAC5Cc,EAD4C,GACjChB,OADiC,CAC5CgB,EAD4C;AAAA,QACxCF,EADwC,GACjCd,OADiC,CACxCc,EADwC;AAElDZ,aAAS,UAAT,EAAqB;AACnBC,4CAA+Ba,EAA/B,CADmB;AAEnBZ,cAAQ,KAFW;AAGnBC,eAASS;AAHU,KAArB,EAIG;AAAEN,YAAM;AAAR,KAJH;AAKD,GAhEa;AAiERU,eAjEQ;AAAA;AAAA;AAAA,sDAiE6BlB,OAjE7B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiESC,oBAjET,UAiESA,MAjET,EAiEiBC,QAjEjB,UAiEiBA,QAjEjB;AAAA,uBAkEOF,WAAW,EAlElB,EAkEJgB,EAlEI,UAkEJA,EAlEI,EAkEAF,EAlEA,UAkEAA,EAlEA;AAmEZZ,uBAAS,UAAT,EAAqB;AACnBC,wCAAiBa,EAAjB,CADmB;AAEnBZ,wBAAQ,QAFW;AAGnBC,yBAAS,2BAAY;AACnBJ,yBAAOX,cAAP,EAAuB0B,EAAvB;AACAF,wBAAMA,GAAGR,SAASC,IAAZ,CAAN;AACD;AANkB,eAArB,EAOG;AAAEC,sBAAM;AAAR,eAPH;;AAnEY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA4EdW,aA5Ec,+BA4EW;AAAA,QAAVlB,MAAU,UAAVA,MAAU;AACvBA,WAAO,aAAP;AACD;AA9Ea,CAAhB;AAiFA;;;;AAGA,IAAMmB,0DACHhC,YADG,EACY,UAACS,KAAD,EAAQH,QAAR,EAAqB;AACnCG,QAAMH,QAAN,GAAiBA,QAAjB;AACD,CAHG,+BAIHL,iBAJG,EAIiB,UAACQ,KAAD,EAAW;AAC9BA,QAAMH,QAAN,GAAiBD,YAAYC,QAA7B;AACAG,QAAMF,MAAN,GAAeF,YAAYE,MAA3B;AACD,CAPG,+BAQHL,cARG,EAQc,UAACO,KAAD,EAAQmB,EAAR,EAAe;AAC/BK,UAAQC,GAAR,CAAYN,EAAZ;AACA,SAAOnB,MAAMH,QAAN,CAAesB,EAAf,CAAP;AACAK,UAAQC,GAAR,CAAYzB,MAAMH,QAAN,CAAesB,EAAf,CAAZ;AACD,CAZG,8CAaJxB,WAbI,mEAcSK,KAdT,EAcgB;AAClBA,QAAMF,MAAN,CAAaC,CAAb,GAAiB,EAAjB;AACD,CAhBG,cAAN;AAmBA;;;;AAGA,IAAM2B,UAAU;AACdC,iBAAe,uBAAC3B,KAAD;AAAA,WAAWA,MAAMH,QAAjB;AAAA,GADD;AAEd+B,gBAAc,sBAAC5B,KAAD;AAAA,WAAWA,MAAMF,MAAjB;AAAA,GAFA;AAGdJ;AAHc,CAAhB;AAMA,eAAe;AACbmC,cAAY,IADC;AAEb7B,cAFa;AAGbC,kBAHa;AAIbsB,sBAJa;AAKbG;AALa,CAAf","sourcesContent":["import {\n  SET_SETTINGS,\n  SET_INITIAL_STATE,\n  REMOVE_SETTING\n} from '../mutation-types'\nimport { getField, updateField } from 'vuex-map-fields'\nconst initState = () => {\n  return {\n    settings: {},\n    params: {\n      q: ''\n    }\n  }\n}\n\n/**\n * state\n */\nconst state = {\n  settings: initState().settings,\n  params: initState().params\n}\n\n/**\n * actions\n */\nconst actions = {\n  FetchSetting ({ commit, dispatch }, payload) {\n    let { params } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `settings?sort=status:-1,id:-1`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_SETTINGS, response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  getSetting ({ commit, dispatch }, payload) {\n    let { settingId, params } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `settings/${settingId}`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_SETTINGS, response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  setSetting ({ commit }, payload) {\n    let { settings } = payload || {}\n    if (settings) {\n      commit(SET_SETTINGS, settings)\n    }\n  },\n  createSetting ({ commit, dispatch }, payload) {\n    let { setting, cb, params } = payload\n    dispatch('fetchApi', {\n      url: 'settings',\n      method: 'POST',\n      data: setting,\n      params: params,\n      success: cb\n    }, { root: true })\n  },\n  updateSetting ({ commit, dispatch }, payload) {\n    let { id, setting, cb, params } = payload\n    dispatch('fetchApi', {\n      url: `settings/${id}`,\n      method: 'PUT',\n      data: setting,\n      params: params,\n      success: cb\n    }, { root: true })\n  },\n  updateStatusSetting ({ commit, dispatch }, payload) {\n    let { id, cb } = payload\n    dispatch('fetchApi', {\n      url: `settings/change-status/${id}`,\n      method: 'PUT',\n      success: cb\n    }, { root: true })\n  },\n  async deleteSetting ({ commit, dispatch }, payload) {\n    const { id, cb } = payload || {}\n    dispatch('fetchApi', {\n      url: `settings/${id}`,\n      method: 'DELETE',\n      success: response => {\n        commit(REMOVE_SETTING, id)\n        cb && cb(response.data)\n      }\n    }, { root: true })\n  },\n  clearFilter ({ commit }) {\n    commit('resetFilter')\n  }\n}\n\n/**\n * mutations\n */\nconst mutations = {\n  [SET_SETTINGS]: (state, settings) => {\n    state.settings = settings\n  },\n  [SET_INITIAL_STATE]: (state) => {\n    state.settings = initState().settings\n    state.params = initState().params\n  },\n  [REMOVE_SETTING]: (state, id) => {\n    console.log(id)\n    delete state.settings[id]\n    console.log(state.settings[id])\n  },\n  updateField,\n  resetFilter (state) {\n    state.params.q = ''\n  }\n}\n\n/**\n * getters\n */\nconst getters = {\n  settingDetail: (state) => state.settings,\n  filterParams: (state) => state.params,\n  getField\n}\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters\n}\n"]}]}