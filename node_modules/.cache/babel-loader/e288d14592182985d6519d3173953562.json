{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js??ref--13-0!/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/branch.js","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/branch.js","mtime":1538377839382},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1534394480737},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":1534394476611},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js","mtime":1534394478618}],"contextDependencies":[],"result":["import _defineProperty from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\n\nvar _mutations;\n\nimport { SET_INITIAL_STATE, SET_BRANCHS, SET_BRANCH } from '../mutation-types';\n\nvar initState = function initState() {\n  return {\n    branchs: {},\n    branch: {}\n  };\n};\n\nvar state = {\n  branchs: initState().branchs,\n  branch: initState().branch\n};\nvar actions = {\n  setBranch: function setBranch(_ref, payload) {\n    var commit = _ref.commit;\n    var branchs = payload.branchs;\n    commit(SET_BRANCHS, branchs);\n  },\n  getBranchs: function getBranchs(_ref2, payload) {\n    var commit = _ref2.commit,\n        dispatch = _ref2.dispatch;\n    dispatch('fetchApi', {\n      url: \"branches\",\n      method: 'GET',\n      success: function success(response) {\n        commit(SET_BRANCHS, response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  getBranch: function getBranch(_ref3, payload) {\n    var commit = _ref3.commit,\n        dispatch = _ref3.dispatch;\n    var branchId = payload.branchId,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: \"branches/\".concat(branchId),\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_BRANCH, response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  getBranchForUser: function getBranchForUser(_ref4, payload) {\n    var commit = _ref4.commit,\n        dispatch = _ref4.dispatch;\n    dispatch('fetchApi', {\n      url: \"branches\",\n      method: 'GET',\n      success: function success(response) {\n        commit(SET_BRANCHS, response.data);\n      }\n    }, {\n      root: true\n    });\n  },\n  createBranch: function createBranch(_ref5, payload) {\n    var commit = _ref5.commit,\n        dispatch = _ref5.dispatch;\n    var branch = payload.branch,\n        cb = payload.cb,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: 'branches',\n      method: 'POST',\n      data: branch,\n      params: params,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  updateBranch: function updateBranch(_ref6, payload) {\n    var commit = _ref6.commit,\n        dispatch = _ref6.dispatch;\n    var id = payload.id,\n        branch = payload.branch,\n        cb = payload.cb,\n        params = payload.params;\n    dispatch('fetchApi', {\n      url: \"branches/\".concat(id),\n      method: 'PUT',\n      data: branch,\n      params: params,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  deleteBranch: function deleteBranch(_ref7, payload) {\n    var commit = _ref7.commit,\n        dispatch = _ref7.dispatch;\n\n    var _ref8 = payload || {},\n        id = _ref8.id,\n        cb = _ref8.cb,\n        error = _ref8.error;\n\n    dispatch('fetchApi', {\n      url: \"branches/\".concat(id),\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  }\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, SET_BRANCHS, function (state, branchs) {\n  state.branchs = branchs;\n}), _defineProperty(_mutations, SET_BRANCH, function (state, branch) {\n  state.branch = branch;\n}), _defineProperty(_mutations, SET_INITIAL_STATE, function (state) {\n  state.branchs = initState().branchs;\n  state.branch = initState().branch;\n}), _mutations);\nvar getters = {\n  branchAll: function branchAll(state) {\n    return state.branchs;\n  },\n  branchDetail: function branchDetail(state) {\n    return state.branch;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["src/store/modules/branch.js"],"names":["SET_INITIAL_STATE","SET_BRANCHS","SET_BRANCH","initState","branchs","branch","state","actions","setBranch","payload","commit","getBranchs","dispatch","url","method","success","response","data","root","getBranch","branchId","params","getBranchForUser","createBranch","cb","updateBranch","id","deleteBranch","error","mutations","getters","branchAll","branchDetail","namespaced"],"mappings":"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","sourceRoot":"/home/nguyenxuancuong/Sites/hrm_fe","sourcesContent":["import {\n  SET_INITIAL_STATE,\n  SET_BRANCHS,\n  SET_BRANCH\n} from '../mutation-types'\n\nconst initState = () => {\n  return {\n    branchs: {},\n    branch: {}\n  }\n}\n\nconst state = {\n  branchs: initState().branchs,\n  branch: initState().branch\n}\nconst actions = {\n  setBranch ({ commit }, payload) {\n    let { branchs } = payload\n    commit(SET_BRANCHS, branchs)\n  },\n  getBranchs ({ commit, dispatch }, payload) {\n    dispatch(\n      'fetchApi',\n      {\n        url: `branches`,\n        method: 'GET',\n        success: (response) => {\n          commit(SET_BRANCHS, response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  getBranch ({ commit, dispatch }, payload) {\n    let { branchId, params } = payload\n    dispatch(\n      'fetchApi',\n      {\n        url: `branches/${branchId}`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_BRANCH, response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  getBranchForUser ({ commit, dispatch }, payload) {\n    dispatch(\n      'fetchApi',\n      {\n        url: `branches`,\n        method: 'GET',\n        success: (response) => {\n          commit(SET_BRANCHS, response.data)\n        }\n      },\n      { root: true }\n    )\n  },\n  createBranch ({ commit, dispatch }, payload) {\n    let { branch, cb, params } = payload\n    dispatch('fetchApi', {\n      url: 'branches',\n      method: 'POST',\n      data: branch,\n      params: params,\n      success: cb\n    }, { root: true })\n  },\n  updateBranch ({ commit, dispatch }, payload) {\n    let { id, branch, cb, params } = payload\n    dispatch('fetchApi', {\n      url: `branches/${id}`,\n      method: 'PUT',\n      data: branch,\n      params: params,\n      success: cb\n    }, { root: true })\n  },\n  deleteBranch ({ commit, dispatch }, payload) {\n    let { id, cb, error } = payload || {}\n    dispatch('fetchApi', {\n      url: `branches/${id}`,\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, { root: true })\n  }\n}\nconst mutations = {\n  [SET_BRANCHS]: (state, branchs) => {\n    state.branchs = branchs\n  },\n  [SET_BRANCH]: (state, branch) => {\n    state.branch = branch\n  },\n  [SET_INITIAL_STATE]: (state) => {\n    state.branchs = initState().branchs\n    state.branch = initState().branch\n  }\n\n}\n\nconst getters = {\n  branchAll: (state) => state.branchs,\n  branchDetail: (state) => state.branch\n}\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters\n}\n"]}]}