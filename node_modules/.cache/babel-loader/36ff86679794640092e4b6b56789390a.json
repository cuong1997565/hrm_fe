{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js??ref--13-0!/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/plan.js","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/plan.js","mtime":1538377839382},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1534394480737},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":1534394476611},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js","mtime":1534394478618}],"contextDependencies":[],"result":["import _defineProperty from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\nimport { SET_PLAN } from '../mutation-types';\n\nvar initState = function initState() {\n  return {\n    plan: {}\n  };\n};\n/**\n * state\n */\n\n\nvar state = {\n  plan: initState().plan\n  /**\n   * actions\n   */\n\n};\nvar actions = {\n  setPlan: function setPlan(_ref, payload) {\n    var commit = _ref.commit;\n\n    var _ref2 = payload || {},\n        plan = _ref2.plan;\n\n    commit(SET_PLAN, plan);\n  },\n  fetchPlan: function fetchPlan(_ref3, payload) {\n    var commit = _ref3.commit,\n        dispatch = _ref3.dispatch;\n\n    var _ref4 = payload || {},\n        params = _ref4.params,\n        error = _ref4.error;\n\n    dispatch('fetchApi', {\n      url: \"plans\",\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_PLAN, response.data);\n      },\n      error: error\n    }, {\n      root: true\n    });\n  },\n  getPlan: function getPlan(_ref5, payload) {\n    var commit = _ref5.commit,\n        dispatch = _ref5.dispatch;\n\n    var _ref6 = payload || {},\n        planId = _ref6.planId,\n        params = _ref6.params,\n        error = _ref6.error;\n\n    dispatch('fetchApi', {\n      url: \"plans/\".concat(planId),\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_PLAN, response.data);\n      },\n      error: error\n    }, {\n      root: true\n    });\n  },\n  createPlan: function createPlan(_ref7, payload) {\n    var commit = _ref7.commit,\n        dispatch = _ref7.dispatch;\n\n    var _ref8 = payload || {},\n        plan = _ref8.plan,\n        cb = _ref8.cb;\n\n    dispatch('fetchApi', {\n      url: 'plans',\n      method: 'POST',\n      data: plan,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  updatePlan: function updatePlan(_ref9, payload) {\n    var commit = _ref9.commit,\n        dispatch = _ref9.dispatch;\n\n    var _ref10 = payload || {},\n        id = _ref10.id,\n        plan = _ref10.plan,\n        cb = _ref10.cb,\n        error = _ref10.error;\n\n    dispatch('fetchApi', {\n      url: \"plans/\".concat(id),\n      method: 'PUT',\n      data: plan,\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  },\n  deletePlan: function deletePlan(_ref11, payload) {\n    var commit = _ref11.commit,\n        dispatch = _ref11.dispatch;\n\n    var _ref12 = payload || {},\n        id = _ref12.id,\n        cb = _ref12.cb,\n        error = _ref12.error;\n\n    dispatch('fetchApi', {\n      url: \"plans/\".concat(id),\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  }\n};\n/**\n * mutations\n */\n\nvar mutations = _defineProperty({}, SET_PLAN, function (state, plan) {\n  state.plan = plan;\n});\n/**\n * getters\n */\n\n\nvar getters = {\n  planDetail: function planDetail(state) {\n    return state.plan;\n  },\n  planAll: function planAll(state) {\n    return state.plan;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["src/store/modules/plan.js"],"names":["SET_PLAN","initState","plan","state","actions","setPlan","payload","commit","fetchPlan","dispatch","params","error","url","method","success","response","data","root","getPlan","planId","createPlan","cb","updatePlan","id","deletePlan","mutations","getters","planDetail","planAll","namespaced"],"mappings":"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","sourceRoot":"/home/nguyenxuancuong/Sites/hrm_fe","sourcesContent":["import {\n  SET_PLAN\n} from '../mutation-types'\n\nconst initState = () => {\n  return {\n    plan: {}\n  }\n}\n\n/**\n * state\n */\nconst state = {\n  plan: initState().plan\n}\n\n/**\n * actions\n */\nconst actions = {\n  setPlan ({ commit }, payload) {\n    let { plan } = payload || {}\n    commit(SET_PLAN, plan)\n  },\n  fetchPlan ({ commit, dispatch }, payload) {\n    let { params, error } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `plans`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_PLAN, response.data)\n        },\n        error: error\n      },\n      { root: true }\n    )\n  },\n  getPlan ({ commit, dispatch }, payload) {\n    let { planId, params, error } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `plans/${planId}`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_PLAN, response.data)\n        },\n        error: error\n      },\n      { root: true }\n    )\n  },\n  createPlan ({ commit, dispatch }, payload) {\n    let { plan, cb } = payload || {}\n    dispatch('fetchApi', {\n      url: 'plans',\n      method: 'POST',\n      data: plan,\n      success: cb\n    }, { root: true })\n  },\n  updatePlan ({ commit, dispatch }, payload) {\n    let { id, plan, cb, error } = payload || {}\n    dispatch('fetchApi', {\n      url: `plans/${id}`,\n      method: 'PUT',\n      data: plan,\n      success: cb,\n      error: error\n    }, { root: true })\n  },\n  deletePlan ({ commit, dispatch }, payload) {\n    let { id, cb, error } = payload || {}\n    dispatch('fetchApi', {\n      url: `plans/${id}`,\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, { root: true })\n  }\n}\n\n/**\n * mutations\n */\nconst mutations = {\n  [SET_PLAN]: (state, plan) => {\n    state.plan = plan\n  }\n  // [SET_INITIAL_STATE]: (state) => {\n  //   state.role = initState().role\n  // }\n}\n\n/**\n * getters\n */\nconst getters = {\n  planDetail: (state) => state.plan,\n  planAll: (state) => state.plan\n}\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters\n}\n"]}]}