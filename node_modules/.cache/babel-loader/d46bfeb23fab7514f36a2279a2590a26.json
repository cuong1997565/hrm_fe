{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/quasar-calendar/src/components/calendar/CalendarDayColumn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/quasar-calendar/src/components/calendar/CalendarDayColumn.vue","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1538403001796},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CalendarEvent from './CalendarEvent';\nimport CalendarMixin from './mixins/CalendarMixin';\nimport { date } from 'quasar';\n\nvar _require = require('luxon'),\n    DateTime = _require.DateTime;\n\nexport default {\n  name: 'CalendarDayColumn',\n  props: {\n    startDate: {\n      type: [Object, Date],\n      default: function _default() {\n        return new Date();\n      }\n    },\n    dateEvents: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    columnCssClass: {\n      type: String,\n      default: 'col'\n    },\n    dayCellHeight: {\n      type: Number,\n      default: 5\n    },\n    dayCellHeightUnit: {\n      type: String,\n      default: 'rem'\n    },\n    eventRef: String,\n    preventEventDetail: {\n      type: Boolean,\n      default: false\n    },\n    calendarLocale: {\n      type: String,\n      default: function _default() {\n        return DateTime.local().locale;\n      }\n    },\n    calendarTimezone: {\n      type: String,\n      default: function _default() {\n        return DateTime.local().zoneName;\n      }\n    },\n    allowEditing: {\n      type: Boolean,\n      default: false\n    }\n  },\n  components: {\n    CalendarEvent: CalendarEvent\n  },\n  mixins: [CalendarMixin],\n  data: function data() {\n    return {\n      workingDate: new Date(),\n      eventDetailEventObject: {},\n      timePosition: {\n        display: 'none'\n      },\n      timePositionInterval: {}\n    };\n  },\n  watch: {\n    startDate: 'mountSetDate'\n  },\n  computed: {\n    columnCss: function columnCss() {\n      var returnVal = {\n        'calendar-day-column-content': true,\n        'relative-position': true,\n        'calendar-day-column-weekend': this.isWeekendDay(this.workingDate),\n        'calendar-day-column-current': this.isCurrentDate(this.workingDate)\n      };\n      returnVal[this.columnCssClass] = true;\n      return returnVal;\n    },\n    getCellStyle: function getCellStyle() {\n      var thisHeight = this.dayCellHeight + this.dayCellHeightUnit;\n      return {\n        height: thisHeight,\n        'max-height': thisHeight\n      };\n    }\n  },\n  methods: {\n    calculateDayEventClass: function calculateDayEventClass(thisEvent) {\n      var classes = {};\n\n      if (thisEvent.numberOfOverlaps > 0) {\n        classes['calendar-day-event-overlap'] = true;\n\n        if (thisEvent.overlapIteration === 1) {\n          classes['calendar-day-event-overlap-first'] = true;\n        }\n      }\n\n      return classes;\n    },\n    calculateDayEventStyle: function calculateDayEventStyle(thisEvent) {\n      var style = {\n        position: 'absolute',\n        'z-index': 10,\n        width: '100%'\n      };\n      var positions = {};\n\n      if (thisEvent.start.dateObject && thisEvent.end.dateObject) {\n        positions = this.calculateDayEventPosition(thisEvent.start.dateObject, thisEvent.end.dateObject);\n      } else {\n        positions = {\n          top: 0,\n          height: 0\n        };\n      }\n\n      style['top'] = positions.top;\n      style['height'] = positions.height;\n\n      if (thisEvent.numberOfOverlaps > 0) {\n        var thisWidth = (100 / (thisEvent.numberOfOverlaps + 1)).toFixed(2);\n        var thisShift = thisWidth * (thisEvent.overlapIteration - 1);\n        style['width'] = thisWidth + '%';\n        style['max-width'] = thisWidth + '%';\n        style['left'] = thisShift + '%';\n        style['z-index'] = 10 + thisEvent.overlapIteration;\n      }\n\n      return style;\n    },\n    calculateDayEventPosition: function calculateDayEventPosition(startDateObject, endDateObject) {\n      var startMidnight = date.adjustDate(startDateObject, {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        milliseconds: 0\n      });\n      var topMinuteCount = date.getDateDiff(startDateObject, startMidnight, 'minutes');\n      var heightMinuteCount = date.getDateDiff(endDateObject, startDateObject, 'minutes');\n      var sizePerMinute = this.dayCellHeight / 60;\n      return {\n        top: topMinuteCount * sizePerMinute + this.dayCellHeightUnit,\n        height: heightMinuteCount * sizePerMinute + this.dayCellHeightUnit\n      };\n    },\n    calculateTimePosition: function calculateTimePosition() {\n      var pos = {};\n      var thisDateObject = this.makeDT(DateTime.local());\n\n      if (thisDateObject.hasSame(this.workingDate, 'day') && thisDateObject.hasSame(this.workingDate, 'month') && thisDateObject.hasSame(this.workingDate, 'year')) {\n        pos = this.calculateDayEventPosition(thisDateObject, thisDateObject);\n        pos.height = pos.top + 1;\n      } else {\n        pos = {\n          display: 'none'\n        };\n      }\n\n      this.timePosition = pos;\n    },\n    startTimePositionInterval: function startTimePositionInterval() {\n      this.calculateTimePosition();\n      this.timePositionInterval = setInterval(this.calculateTimePosition, 60000 // one minute\n      );\n    },\n    endTimePositionInterval: function endTimePositionInterval() {\n      clearInterval(this.timePositionInterval);\n    }\n  },\n  mounted: function mounted() {\n    this.mountSetDate();\n    this.startTimePositionInterval();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.endTimePositionInterval();\n  }\n};",{"version":3,"sources":["CalendarDayColumn.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :class=\"columnCss\">\n    <!-- underlying cells -->\n    <div\n      v-for=\"thisHour in 24\"\n      :key=\"thisHour\"\n      :style=\"getCellStyle\"\n      :id=\"getDayHourId(eventRef, workingDate, thisHour - 1)\"\n    >\n      <div class=\"calendar-day-time-content\"></div>\n    </div>\n\n    <!-- events -->\n    <div\n      v-if=\"dateEvents.length > 0\"\n      v-for=\"eventObject in dateEvents\"\n      :key=\"makeDT(workingDate).toISODate() + getEventIdString(eventObject)\"\n      :class=\"calculateDayEventClass(eventObject)\"\n      :style=\"calculateDayEventStyle(eventObject)\"\n    >\n      <calendar-event\n        v-if=\"!eventObject.start.isAllDay\"\n        :event-object=\"eventObject\"\n        :event-ref=\"eventRef\"\n        :calendar-locale=\"calendarLocale\"\n        :calendar-timezone=\"calendarTimezone\"\n        :prevent-event-detail=\"preventEventDetail\"\n        :allow-editing=\"allowEditing\"\n      />\n    </div>\n\n    <!-- current time -->\n    <div\n      class=\"current-time-line\"\n      :style=\"timePosition\"\n    ></div>\n\n  </div>\n</template>\n\n<script>\n  import CalendarEvent from './CalendarEvent'\n  import CalendarMixin from './mixins/CalendarMixin'\n  import { date } from 'quasar'\n  const { DateTime } = require('luxon')\n  export default {\n    name: 'CalendarDayColumn',\n    props: {\n      startDate: {\n        type: [Object, Date],\n        default: () => { return new Date() }\n      },\n      dateEvents: {\n        type: Array,\n        default: () => []\n      },\n      columnCssClass: {\n        type: String,\n        default: 'col'\n      },\n      dayCellHeight: {\n        type: Number,\n        default: 5\n      },\n      dayCellHeightUnit: {\n        type: String,\n        default: 'rem'\n      },\n      eventRef: String,\n      preventEventDetail: {\n        type: Boolean,\n        default: false\n      },\n      calendarLocale: {\n        type: String,\n        default: () => { return DateTime.local().locale }\n      },\n      calendarTimezone: {\n        type: String,\n        default: () => { return DateTime.local().zoneName }\n      },\n      allowEditing: {\n        type: Boolean,\n        default: false\n      }\n    },\n    components: {\n      CalendarEvent\n    },\n    mixins: [CalendarMixin],\n    data () {\n      return {\n        workingDate: new Date(),\n        eventDetailEventObject: {},\n        timePosition: {\n          display: 'none'\n        },\n        timePositionInterval: {}\n      }\n    },\n    watch: {\n      startDate: 'mountSetDate'\n    },\n    computed: {\n      columnCss: function () {\n        let returnVal = {\n          'calendar-day-column-content': true,\n          'relative-position': true,\n          'calendar-day-column-weekend': this.isWeekendDay(this.workingDate),\n          'calendar-day-column-current': this.isCurrentDate(this.workingDate)\n        }\n        returnVal[this.columnCssClass] = true\n        return returnVal\n      },\n      getCellStyle: function () {\n        let thisHeight = this.dayCellHeight + this.dayCellHeightUnit\n        return {\n          height: thisHeight,\n          'max-height': thisHeight\n        }\n      }\n    },\n    methods: {\n      calculateDayEventClass: function (thisEvent) {\n        let classes = {}\n        if (thisEvent.numberOfOverlaps > 0) {\n          classes['calendar-day-event-overlap'] = true\n          if (thisEvent.overlapIteration === 1) {\n            classes['calendar-day-event-overlap-first'] = true\n          }\n        }\n        return classes\n      },\n      calculateDayEventStyle: function (thisEvent) {\n        let style = {\n          position: 'absolute',\n          'z-index': 10,\n          width: '100%'\n        }\n        let positions = {}\n        if (thisEvent.start.dateObject && thisEvent.end.dateObject) {\n          positions = this.calculateDayEventPosition(\n            thisEvent.start.dateObject,\n            thisEvent.end.dateObject\n          )\n        }\n        else {\n          positions = {\n            top: 0,\n            height: 0\n          }\n        }\n        style['top'] = positions.top\n        style['height'] = positions.height\n        if (thisEvent.numberOfOverlaps > 0) {\n          let thisWidth = (100 / (thisEvent.numberOfOverlaps + 1)).toFixed(2)\n          let thisShift = thisWidth * (thisEvent.overlapIteration - 1)\n          style['width'] = thisWidth + '%'\n          style['max-width'] = thisWidth + '%'\n          style['left'] = thisShift + '%'\n          style['z-index'] = 10 + thisEvent.overlapIteration\n        }\n        return style\n      },\n      calculateDayEventPosition: function (startDateObject, endDateObject) {\n        let startMidnight = date.adjustDate(startDateObject, {\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n          milliseconds: 0\n        })\n        let topMinuteCount = date.getDateDiff(startDateObject, startMidnight, 'minutes')\n        let heightMinuteCount = date.getDateDiff(endDateObject, startDateObject, 'minutes')\n        let sizePerMinute = this.dayCellHeight / 60\n        return {\n          top: (topMinuteCount * sizePerMinute) + this.dayCellHeightUnit,\n          height: (heightMinuteCount * sizePerMinute) + this.dayCellHeightUnit\n        }\n      },\n      calculateTimePosition: function () {\n        let pos = {}\n        let thisDateObject = this.makeDT(DateTime.local())\n        if (\n          thisDateObject.hasSame(this.workingDate, 'day') &&\n          thisDateObject.hasSame(this.workingDate, 'month') &&\n          thisDateObject.hasSame(this.workingDate, 'year')\n        ) {\n          pos = this.calculateDayEventPosition(thisDateObject, thisDateObject)\n          pos.height = pos.top + 1\n        }\n        else {\n          pos = {\n            display: 'none'\n          }\n        }\n        this.timePosition = pos\n      },\n      startTimePositionInterval: function () {\n        this.calculateTimePosition()\n        this.timePositionInterval = setInterval(\n          this.calculateTimePosition,\n          60000 // one minute\n        )\n      },\n      endTimePositionInterval: function () {\n        clearInterval(this.timePositionInterval)\n      }\n    },\n    mounted () {\n      this.mountSetDate()\n      this.startTimePositionInterval()\n    },\n    beforeDestroy () {\n      this.endTimePositionInterval()\n    }\n  }\n</script>\n\n<style lang=\"stylus\">\n  @import 'calendar.vars.styl'\n\n  .calendar-day\n    position relative\n    .calendar-day-cell-height\n      height 5rem\n      max-height 5rem\n    .calendar-day-column-label\n      //\n    .calendar-day-column-content\n      position relative\n    .calendar-day-column-current\n      background-color $currentDayBackgroundColor\n    .calendar-day-column-weekend\n      background-color $weekendDayBackgroundColor\n    .calendar-day-time\n      padding-right .5em\n      border-right $borderOuter\n    .calendar-day-time-content\n      border-top $borderThin\n    .calendar-day-event-overlap\n      margin-left 1px\n    .calendar-day-event-overlap-first\n      margin-left 0\n    .current-time-line\n      position absolute\n      border 1px solid red\n      width 100%\n\n\n</style>\n"],"sourceRoot":"node_modules/quasar-calendar/src/components/calendar"}]}