{"remainingRequest":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js!/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js??ref--13-0!/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/contracts.js","dependencies":[{"path":"/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/contracts.js","mtime":1541040965622},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/cache-loader/dist/cjs.js","mtime":1538403001796},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/home/nguyenxuancuong/Sites/hrm_fe/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\n\nvar _mutations;\n\nimport { SET_CONTRACTS, SET_INITIAL_STATE } from '../mutation-types';\nimport { getField, updateField } from 'vuex-map-fields';\n\nvar initState = function initState() {\n  return {\n    contract: [],\n    params: {\n      q: '',\n      sort: 'id:-1',\n      employeeId: '',\n      type: '',\n      status: '',\n      dateSign: '',\n      dateExpiration: ''\n    }\n  };\n};\n/**\n * state\n */\n\n\nvar state = {\n  contract: initState().contract,\n  params: initState().params\n  /**\n   * actions\n   */\n\n};\nvar actions = {\n  setContract: function setContract(_ref, payload) {\n    var commit = _ref.commit;\n\n    var _ref2 = payload || {},\n        contract = _ref2.contract;\n\n    commit(SET_CONTRACTS, contract);\n  },\n  clearFilter: function clearFilter(_ref3) {\n    var commit = _ref3.commit;\n    commit('resetFilter');\n  },\n  fetchContract: function fetchContract(_ref4, payload) {\n    var commit = _ref4.commit,\n        dispatch = _ref4.dispatch;\n\n    var _ref5 = payload || {},\n        params = _ref5.params,\n        error = _ref5.error;\n\n    dispatch('fetchApi', {\n      url: \"contracts\",\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_CONTRACTS, response.data);\n      },\n      error: error\n    }, {\n      root: true\n    });\n  },\n  getContract: function getContract(_ref6, payload) {\n    var commit = _ref6.commit,\n        dispatch = _ref6.dispatch;\n\n    var _ref7 = payload || {},\n        contractId = _ref7.contractId,\n        params = _ref7.params,\n        error = _ref7.error;\n\n    dispatch('fetchApi', {\n      url: \"contracts/\".concat(contractId),\n      method: 'GET',\n      params: params || {},\n      success: function success(response) {\n        commit(SET_CONTRACTS, response.data);\n        console.log('data :', response.data);\n      },\n      error: error\n    }, {\n      root: true\n    });\n  },\n  createContract: function createContract(_ref8, payload) {\n    var commit = _ref8.commit,\n        dispatch = _ref8.dispatch;\n\n    var _ref9 = payload || {},\n        contract = _ref9.contract,\n        cb = _ref9.cb;\n\n    dispatch('fetchApi', {\n      url: 'contracts',\n      method: 'POST',\n      data: contract,\n      success: cb\n    }, {\n      root: true\n    });\n  },\n  updateContract: function updateContract(_ref10, payload) {\n    var commit = _ref10.commit,\n        dispatch = _ref10.dispatch;\n\n    var _ref11 = payload || {},\n        id = _ref11.id,\n        contract = _ref11.contract,\n        cb = _ref11.cb,\n        error = _ref11.error;\n\n    dispatch('fetchApi', {\n      url: \"contracts/\".concat(id),\n      method: 'PUT',\n      data: contract,\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  },\n  updateStatusContract: function updateStatusContract(_ref12, payload) {\n    var commit = _ref12.commit,\n        dispatch = _ref12.dispatch;\n    var id = payload.id;\n    dispatch('fetchApi', {\n      url: \"contracts/change-status/\".concat(id),\n      method: 'PUT'\n    }, {\n      root: true\n    });\n  },\n  deleteContract: function deleteContract(_ref13, payload) {\n    var commit = _ref13.commit,\n        dispatch = _ref13.dispatch;\n\n    var _ref14 = payload || {},\n        id = _ref14.id,\n        cb = _ref14.cb,\n        error = _ref14.error;\n\n    console.log('id contracts :', id);\n    dispatch('fetchApi', {\n      url: \"contracts/\".concat(id),\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, {\n      root: true\n    });\n  }\n};\n/**\n * mutations\n */\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, SET_CONTRACTS, function (state, contract) {\n  state.contract = contract;\n  console.log('SET Contract');\n}), _defineProperty(_mutations, SET_INITIAL_STATE, function (state) {\n  state.contract = initState().contract;\n  state.params = initState().params;\n  state.date = initState().date;\n}), _defineProperty(_mutations, \"updateField\", updateField), _mutations);\nvar getters = {\n  contractDetail: function contractDetail(state) {\n    return state.contract;\n  },\n  filterParams: function filterParams(state) {\n    return state.params;\n  },\n  getField: getField\n};\nexport default {\n  namespaced: true,\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n};",{"version":3,"sources":["/home/nguyenxuancuong/Sites/hrm_fe/src/store/modules/contracts.js"],"names":["SET_CONTRACTS","SET_INITIAL_STATE","getField","updateField","initState","contract","params","q","sort","employeeId","type","status","dateSign","dateExpiration","state","actions","setContract","payload","commit","clearFilter","fetchContract","dispatch","error","url","method","success","response","data","root","getContract","contractId","console","log","createContract","cb","updateContract","id","updateStatusContract","deleteContract","mutations","date","getters","contractDetail","filterParams","namespaced"],"mappings":"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","sourcesContent":["import {\n  SET_CONTRACTS,\n  SET_INITIAL_STATE\n} from '../mutation-types'\nimport { getField, updateField } from 'vuex-map-fields'\nconst initState = () => {\n  return {\n    contract: [],\n    params: {\n      q: '',\n      sort: 'id:-1',\n      employeeId: '',\n      type: '',\n      status: '',\n      dateSign: '',\n      dateExpiration: ''\n    }\n\n  }\n}\n\n/**\n * state\n */\nconst state = {\n  contract: initState().contract,\n  params: initState().params\n}\n\n/**\n * actions\n */\nconst actions = {\n  setContract ({ commit }, payload) {\n    let { contract } = payload || {}\n    commit(SET_CONTRACTS, contract)\n  },\n  clearFilter ({ commit }) {\n    commit('resetFilter')\n  },\n  fetchContract ({ commit, dispatch }, payload) {\n    let { params, error } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `contracts`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_CONTRACTS, response.data)\n        },\n        error: error\n      },\n      { root: true }\n    )\n  },\n  getContract ({ commit, dispatch }, payload) {\n    let { contractId, params, error } = payload || {}\n    dispatch(\n      'fetchApi',\n      {\n        url: `contracts/${contractId}`,\n        method: 'GET',\n        params: params || {},\n        success: (response) => {\n          commit(SET_CONTRACTS, response.data)\n          console.log('data :', response.data)\n        },\n        error: error\n      },\n      { root: true }\n    )\n  },\n  createContract ({ commit, dispatch }, payload) {\n    let { contract, cb } = payload || {}\n    dispatch('fetchApi', {\n      url: 'contracts',\n      method: 'POST',\n      data: contract,\n      success: cb\n    }, { root: true })\n  },\n  updateContract ({ commit, dispatch }, payload) {\n    let { id, contract, cb, error } = payload || {}\n    dispatch('fetchApi', {\n      url: `contracts/${id}`,\n      method: 'PUT',\n      data: contract,\n      success: cb,\n      error: error\n    }, { root: true })\n  },\n  updateStatusContract ({ commit, dispatch }, payload) {\n    let { id } = payload\n    dispatch('fetchApi', {\n      url: `contracts/change-status/${id}`,\n      method: 'PUT'\n    }, { root: true })\n  },\n  deleteContract ({ commit, dispatch }, payload) {\n    let { id, cb, error } = payload || {}\n    console.log('id contracts :', id)\n    dispatch('fetchApi', {\n      url: `contracts/${id}`,\n      method: 'DELETE',\n      success: cb,\n      error: error\n    }, { root: true })\n  }\n}\n\n/**\n * mutations\n */\nconst mutations = {\n  [SET_CONTRACTS]: (state, contract) => {\n    state.contract = contract\n    console.log('SET Contract')\n  },\n  [SET_INITIAL_STATE]: (state) => {\n    state.contract = initState().contract\n    state.params = initState().params\n    state.date = initState().date\n  },\n  // resetFilter (state) {\n  //   state.params.q = ''\n  //   state.params.employeeId = ''\n  //   state.params.type = ''\n  //   state.params.status = ''\n  //   state.params.dateSign = ''\n  //   state.params.dateExpiration = ''\n  // },\n  updateField\n}\n\nconst getters = {\n  contractDetail: (state) => state.contract,\n  filterParams: (state) => state.params,\n  getField\n}\n\nexport default {\n  namespaced: true,\n  state,\n  actions,\n  mutations,\n  getters\n}\n"]}]}